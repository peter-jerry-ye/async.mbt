// Generated using `moon info`, DON'T EDIT IT
package "peter-jerry-ye/async/promise"

// Values
fn[A] all(Array[T[A]]) -> T[Array[A]]

fn[A] any(Array[T[A]]) -> T[A]

fn[A] make() -> Resolver[A]

fn[A] reject(Error) -> T[A]

fn[A] resolve(A) -> T[A]

fn[A] spawn(async () -> A raise) -> T[A]

// Types and methods
pub suberror AggregateError Array[Error]

type Resolver[A]
fn[A] Resolver::future(Self[A]) -> T[A]
fn[A] Resolver::reject(Self[A], Error) -> Unit
fn[A] Resolver::resolve(Self[A], A) -> Unit
fn[A] Resolver::try_complete(Self[A], () -> A raise) -> Bool

type T[A]
async fn[A] T::await(Self[A]) -> A raise
fn[A, B] T::bind(Self[A], (A) -> Self[B]) -> Self[B]
fn[A] T::finally(Self[A], () -> Unit) -> Self[A]
fn[A] T::get(Self[A]) -> Result[A, Error]?
fn[A] T::on_failure(Self[A], (Error) -> Unit) -> Unit
fn[A] T::on_success(Self[A], (A) -> Unit) -> Unit
fn[A, B] T::zip(Self[A], Self[B]) -> Self[(A, B)]
fn[A, B, C] T::zip_with(Self[A], Self[B], (A, B) -> C) -> Self[C]

// Type aliases

// Traits

