package "peter-jerry-ye/async/stream"

import(
  "moonbitlang/core/string"
  "peter-jerry-ye/async/promise"
  "tonyfettes/encoding"
)

// Values
fn buffered_reader(&Reader) -> BufferedReader

fn[T : InputStream] input_stream_reader(T, encoding~ : @encoding.Encoding = ..) -> &Reader

fn[T : OutputStream] output_stream_writer(T, encoding~ : @encoding.Encoding = ..) -> &Writer

fn string_reader(String) -> StringReader

// Types and methods
pub(all) type AsyncIterable[T] () -> T raise
fn[T] AsyncIterable::inner(Self[T]) -> () -> T raise

pub struct BufferedReader {
  stream : &Reader
  mut buffer : String
  mut offset : UInt
  mut len : UInt
  mut error : Error?
}
fn BufferedReader::read_line(Self) -> @promise.T[String]
impl Closable for BufferedReader
impl Reader for BufferedReader

pub struct StringReader {
  mut closed : Bool
  mut buffer : @string.StringView
}
impl Closable for StringReader
impl Reader for StringReader

// Type aliases

// Traits
pub(open) trait Closable {
  closed(Self) -> Bool
  close(Self) -> Unit
}

pub(open) trait Flushable {
  flush(Self) -> @promise.T[Unit]
}

pub(open) trait InputStream : Closable {
  readable(Self) -> Bool
  read(Self, UInt64) -> @promise.T[Bytes]
}

pub(open) trait OutputStream : Closable + Flushable {
  writable(Self) -> Bool
  write(Self, Bytes) -> @promise.T[Unit]
}

pub(open) trait Reader : Closable {
  readable(Self) -> Bool
  read(Self, UInt64) -> @promise.T[String]
}

pub(open) trait Writer : Closable + Flushable {
  writable(Self) -> Bool
  write(Self, String) -> @promise.T[Unit]
}

