// Generated using `moon info`, DON'T EDIT IT
package "peter-jerry-ye/async/stream"

import(
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
  "peter-jerry-ye/async/promise"
  "tonyfettes/encoding"
)

// Values
fn buffered_reader(&Reader) -> BufferedReader

fn[T : InputStream] input_stream_reader(T, encoding~ : @encoding.Encoding = .., buffer_size~ : Int = ..) -> &Reader

fn[T : OutputStream] output_stream_writer(T, encoding~ : @encoding.Encoding = ..) -> &Writer

fn string_reader(String) -> StringReader

// Types and methods
pub(all) type AsyncIterable[T] async () -> T raise
fn[T] AsyncIterable::inner(Self[T]) -> async () -> T raise

type BufferedReader
fn BufferedReader::next_line(Self) -> @promise.T[String?]
fn BufferedReader::read_line(Self, StringBuilder) -> @promise.T[Unit?]
impl Closable for BufferedReader
impl Reader for BufferedReader

pub struct StringReader {
  mut closed : Bool
  mut buffer : @string.StringView
}
impl Closable for StringReader
impl Reader for StringReader

// Type aliases

// Traits
pub(open) trait Closable {
  close(Self) -> Unit
}

pub(open) trait Flushable {
  flush(Self) -> @promise.T[Unit]
}

pub(open) trait InputStream : Closable {
  read(Self, FixedArray[Byte], offset~ : Int, max_len~ : Int) -> @promise.T[Int?]
}

pub(open) trait OutputStream : Closable + Flushable {
  write(Self, @bytes.View) -> @promise.T[Unit]
}

pub(open) trait Reader : Closable {
  read(Self, StringBuilder, max_len~ : Int) -> @promise.T[Unit?]
}

pub(open) trait Writer : Closable + Flushable {
  write(Self, @string.StringView) -> @promise.T[Unit]
}

